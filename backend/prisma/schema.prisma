model User {
  id                 Int             @id @default(autoincrement())
  username           String          @unique
  email              String          @unique
  password           String
  channelMemberships ChannelMember[]
  messages           Message[]       @relation("UserMessages")
  refreshTokens      RefreshToken[]
  readStates         ChannelReadState[]
  reactions          Reaction[]
}

model Channel {
  id           Int             @id @default(autoincrement())
  name         String
  memberships  ChannelMember[]
  messages     Message[]       @relation("ChannelMessages")
  readStates   ChannelReadState[]
}

model ChannelMember {
  userId     Int
  channelId  Int
  role       String   @default("member")
  muted      Boolean  @default(false)
  notificationsEnabled Boolean @default(true)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  channel    Channel  @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
  @@index([channelId])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  tokenId    String   @unique
  userId     Int
  tokenHash  String   // hash del refresh token (no guardar texto plano)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  revokedAt  DateTime?
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  channelId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  channel   Channel  @relation("ChannelMessages", fields: [channelId], references: [id])
  readStates ChannelReadState[]
  reactions Reaction[]
}

model Reaction {
  id         Int      @id @default(autoincrement())
  emoji      String
  userId     Int
  messageId  Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  message    Message  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId, emoji])
  @@index([messageId])
}

model ChannelReadState {
  userId            Int
  channelId         Int
  lastReadMessageId Int?
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  channel           Channel  @relation(fields: [channelId], references: [id])
  message           Message? @relation(fields: [lastReadMessageId], references: [id])

  @@id([userId, channelId])
  @@index([channelId])
  @@index([lastReadMessageId])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}